// Code generated by go-mir. DO NOT EDIT.

package api

import (
	"net/http"

	gin "github.com/gin-gonic/gin"
)

type Docker interface {
	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	DockerInfo(*gin.Context)
	VersionInfo(*gin.Context)
	Ping(*gin.Context)

	mustEmbedUnimplementedDockerServant()
}

// RegisterDockerServant register Docker servant to gin
func RegisterDockerServant(e *gin.Engine, s Docker) {
	router := e
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("GET", "/api/docker/info", s.DockerInfo)
	router.Handle("GET", "/api/docker/version", s.VersionInfo)
	router.Handle("GET", "/api/docker/ping", s.Ping)
}

// UnimplementedDockerServant can be embedded to have forward compatible implementations.
type UnimplementedDockerServant struct {
}

func (UnimplementedDockerServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedDockerServant) DockerInfo(c *gin.Context) {
	c.String(http.StatusNotImplemented, "method DockerInfo not implemented")
}

func (UnimplementedDockerServant) VersionInfo(c *gin.Context) {
	c.String(http.StatusNotImplemented, "method VersionInfo not implemented")
}

func (UnimplementedDockerServant) Ping(c *gin.Context) {
	c.String(http.StatusNotImplemented, "method Ping not implemented")
}

func (UnimplementedDockerServant) mustEmbedUnimplementedDockerServant() {}
